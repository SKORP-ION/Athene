// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GroupsClient is the client API for Groups service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GroupsClient interface {
	CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupStatus, error)
	RemoveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupStatus, error)
	GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsRes, error)
	AddPropToGroup(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*GroupStatus, error)
	RemovePropFromGroup(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*GroupStatus, error)
	IsInGroup(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*GroupStatus, error)
}

type groupsClient struct {
	cc grpc.ClientConnInterface
}

func NewGroupsClient(cc grpc.ClientConnInterface) GroupsClient {
	return &groupsClient{cc}
}

func (c *groupsClient) CreateGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupStatus, error) {
	out := new(GroupStatus)
	err := c.cc.Invoke(ctx, "/Groups/CreateGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemoveGroup(ctx context.Context, in *Group, opts ...grpc.CallOption) (*GroupStatus, error) {
	out := new(GroupStatus)
	err := c.cc.Invoke(ctx, "/Groups/RemoveGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) GetGroups(ctx context.Context, in *GetGroupsReq, opts ...grpc.CallOption) (*GetGroupsRes, error) {
	out := new(GetGroupsRes)
	err := c.cc.Invoke(ctx, "/Groups/GetGroups", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) AddPropToGroup(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*GroupStatus, error) {
	out := new(GroupStatus)
	err := c.cc.Invoke(ctx, "/Groups/AddPropToGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) RemovePropFromGroup(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*GroupStatus, error) {
	out := new(GroupStatus)
	err := c.cc.Invoke(ctx, "/Groups/RemovePropFromGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *groupsClient) IsInGroup(ctx context.Context, in *PropReq, opts ...grpc.CallOption) (*GroupStatus, error) {
	out := new(GroupStatus)
	err := c.cc.Invoke(ctx, "/Groups/IsInGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GroupsServer is the server API for Groups service.
// All implementations must embed UnimplementedGroupsServer
// for forward compatibility
type GroupsServer interface {
	CreateGroup(context.Context, *Group) (*GroupStatus, error)
	RemoveGroup(context.Context, *Group) (*GroupStatus, error)
	GetGroups(context.Context, *GetGroupsReq) (*GetGroupsRes, error)
	AddPropToGroup(context.Context, *PropReq) (*GroupStatus, error)
	RemovePropFromGroup(context.Context, *PropReq) (*GroupStatus, error)
	IsInGroup(context.Context, *PropReq) (*GroupStatus, error)
	mustEmbedUnimplementedGroupsServer()
}

// UnimplementedGroupsServer must be embedded to have forward compatible implementations.
type UnimplementedGroupsServer struct {
}

func (UnimplementedGroupsServer) CreateGroup(context.Context, *Group) (*GroupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGroup not implemented")
}
func (UnimplementedGroupsServer) RemoveGroup(context.Context, *Group) (*GroupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveGroup not implemented")
}
func (UnimplementedGroupsServer) GetGroups(context.Context, *GetGroupsReq) (*GetGroupsRes, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroups not implemented")
}
func (UnimplementedGroupsServer) AddPropToGroup(context.Context, *PropReq) (*GroupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddPropToGroup not implemented")
}
func (UnimplementedGroupsServer) RemovePropFromGroup(context.Context, *PropReq) (*GroupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemovePropFromGroup not implemented")
}
func (UnimplementedGroupsServer) IsInGroup(context.Context, *PropReq) (*GroupStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInGroup not implemented")
}
func (UnimplementedGroupsServer) mustEmbedUnimplementedGroupsServer() {}

// UnsafeGroupsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GroupsServer will
// result in compilation errors.
type UnsafeGroupsServer interface {
	mustEmbedUnimplementedGroupsServer()
}

func RegisterGroupsServer(s grpc.ServiceRegistrar, srv GroupsServer) {
	s.RegisterService(&Groups_ServiceDesc, srv)
}

func _Groups_CreateGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).CreateGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Groups/CreateGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).CreateGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemoveGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Group)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemoveGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Groups/RemoveGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemoveGroup(ctx, req.(*Group))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_GetGroups_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGroupsReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).GetGroups(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Groups/GetGroups",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).GetGroups(ctx, req.(*GetGroupsReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_AddPropToGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).AddPropToGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Groups/AddPropToGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).AddPropToGroup(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_RemovePropFromGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).RemovePropFromGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Groups/RemovePropFromGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).RemovePropFromGroup(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Groups_IsInGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PropReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GroupsServer).IsInGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Groups/IsInGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GroupsServer).IsInGroup(ctx, req.(*PropReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Groups_ServiceDesc is the grpc.ServiceDesc for Groups service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Groups_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Groups",
	HandlerType: (*GroupsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGroup",
			Handler:    _Groups_CreateGroup_Handler,
		},
		{
			MethodName: "RemoveGroup",
			Handler:    _Groups_RemoveGroup_Handler,
		},
		{
			MethodName: "GetGroups",
			Handler:    _Groups_GetGroups_Handler,
		},
		{
			MethodName: "AddPropToGroup",
			Handler:    _Groups_AddPropToGroup_Handler,
		},
		{
			MethodName: "RemovePropFromGroup",
			Handler:    _Groups_RemovePropFromGroup_Handler,
		},
		{
			MethodName: "IsInGroup",
			Handler:    _Groups_IsInGroup_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/groups.proto",
}
