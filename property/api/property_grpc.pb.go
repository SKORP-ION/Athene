// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PropertyClient is the client API for Property service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PropertyClient interface {
	GetProperty(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*Properties, error)
	GetWarehouses(ctx context.Context, in *EmptyPropertyRequest, opts ...grpc.CallOption) (*Warehouses, error)
	GetCount(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*Count, error)
	GetActionsList(ctx context.Context, in *EmptyPropertyRequest, opts ...grpc.CallOption) (*GetActionsListResponse, error)
	GetOneProperty(ctx context.Context, in *GetOnePropertyRequest, opts ...grpc.CallOption) (*Property, error)
	IsOnWarehouse(ctx context.Context, in *IsInWarehouseReq, opts ...grpc.CallOption) (*PropStatus, error)
	SendToWarehouse(ctx context.Context, in *SendToWarhouseReq, opts ...grpc.CallOption) (*PropStatus, error)
}

type propertyClient struct {
	cc grpc.ClientConnInterface
}

func NewPropertyClient(cc grpc.ClientConnInterface) PropertyClient {
	return &propertyClient{cc}
}

func (c *propertyClient) GetProperty(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*Properties, error) {
	out := new(Properties)
	err := c.cc.Invoke(ctx, "/property/GetProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) GetWarehouses(ctx context.Context, in *EmptyPropertyRequest, opts ...grpc.CallOption) (*Warehouses, error) {
	out := new(Warehouses)
	err := c.cc.Invoke(ctx, "/property/GetWarehouses", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) GetCount(ctx context.Context, in *SearchParams, opts ...grpc.CallOption) (*Count, error) {
	out := new(Count)
	err := c.cc.Invoke(ctx, "/property/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) GetActionsList(ctx context.Context, in *EmptyPropertyRequest, opts ...grpc.CallOption) (*GetActionsListResponse, error) {
	out := new(GetActionsListResponse)
	err := c.cc.Invoke(ctx, "/property/GetActionsList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) GetOneProperty(ctx context.Context, in *GetOnePropertyRequest, opts ...grpc.CallOption) (*Property, error) {
	out := new(Property)
	err := c.cc.Invoke(ctx, "/property/GetOneProperty", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) IsOnWarehouse(ctx context.Context, in *IsInWarehouseReq, opts ...grpc.CallOption) (*PropStatus, error) {
	out := new(PropStatus)
	err := c.cc.Invoke(ctx, "/property/IsOnWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *propertyClient) SendToWarehouse(ctx context.Context, in *SendToWarhouseReq, opts ...grpc.CallOption) (*PropStatus, error) {
	out := new(PropStatus)
	err := c.cc.Invoke(ctx, "/property/SendToWarehouse", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PropertyServer is the server API for Property service.
// All implementations must embed UnimplementedPropertyServer
// for forward compatibility
type PropertyServer interface {
	GetProperty(context.Context, *SearchParams) (*Properties, error)
	GetWarehouses(context.Context, *EmptyPropertyRequest) (*Warehouses, error)
	GetCount(context.Context, *SearchParams) (*Count, error)
	GetActionsList(context.Context, *EmptyPropertyRequest) (*GetActionsListResponse, error)
	GetOneProperty(context.Context, *GetOnePropertyRequest) (*Property, error)
	IsOnWarehouse(context.Context, *IsInWarehouseReq) (*PropStatus, error)
	SendToWarehouse(context.Context, *SendToWarhouseReq) (*PropStatus, error)
	mustEmbedUnimplementedPropertyServer()
}

// UnimplementedPropertyServer must be embedded to have forward compatible implementations.
type UnimplementedPropertyServer struct {
}

func (UnimplementedPropertyServer) GetProperty(context.Context, *SearchParams) (*Properties, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProperty not implemented")
}
func (UnimplementedPropertyServer) GetWarehouses(context.Context, *EmptyPropertyRequest) (*Warehouses, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWarehouses not implemented")
}
func (UnimplementedPropertyServer) GetCount(context.Context, *SearchParams) (*Count, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (UnimplementedPropertyServer) GetActionsList(context.Context, *EmptyPropertyRequest) (*GetActionsListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetActionsList not implemented")
}
func (UnimplementedPropertyServer) GetOneProperty(context.Context, *GetOnePropertyRequest) (*Property, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOneProperty not implemented")
}
func (UnimplementedPropertyServer) IsOnWarehouse(context.Context, *IsInWarehouseReq) (*PropStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsOnWarehouse not implemented")
}
func (UnimplementedPropertyServer) SendToWarehouse(context.Context, *SendToWarhouseReq) (*PropStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendToWarehouse not implemented")
}
func (UnimplementedPropertyServer) mustEmbedUnimplementedPropertyServer() {}

// UnsafePropertyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PropertyServer will
// result in compilation errors.
type UnsafePropertyServer interface {
	mustEmbedUnimplementedPropertyServer()
}

func RegisterPropertyServer(s grpc.ServiceRegistrar, srv PropertyServer) {
	s.RegisterService(&Property_ServiceDesc, srv)
}

func _Property_GetProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).GetProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/GetProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).GetProperty(ctx, req.(*SearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_GetWarehouses_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).GetWarehouses(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/GetWarehouses",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).GetWarehouses(ctx, req.(*EmptyPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).GetCount(ctx, req.(*SearchParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_GetActionsList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyPropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).GetActionsList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/GetActionsList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).GetActionsList(ctx, req.(*EmptyPropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_GetOneProperty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetOnePropertyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).GetOneProperty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/GetOneProperty",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).GetOneProperty(ctx, req.(*GetOnePropertyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_IsOnWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInWarehouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).IsOnWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/IsOnWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).IsOnWarehouse(ctx, req.(*IsInWarehouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Property_SendToWarehouse_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendToWarhouseReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PropertyServer).SendToWarehouse(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/property/SendToWarehouse",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PropertyServer).SendToWarehouse(ctx, req.(*SendToWarhouseReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Property_ServiceDesc is the grpc.ServiceDesc for Property service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Property_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "property",
	HandlerType: (*PropertyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProperty",
			Handler:    _Property_GetProperty_Handler,
		},
		{
			MethodName: "GetWarehouses",
			Handler:    _Property_GetWarehouses_Handler,
		},
		{
			MethodName: "GetCount",
			Handler:    _Property_GetCount_Handler,
		},
		{
			MethodName: "GetActionsList",
			Handler:    _Property_GetActionsList_Handler,
		},
		{
			MethodName: "GetOneProperty",
			Handler:    _Property_GetOneProperty_Handler,
		},
		{
			MethodName: "IsOnWarehouse",
			Handler:    _Property_IsOnWarehouse_Handler,
		},
		{
			MethodName: "SendToWarehouse",
			Handler:    _Property_SendToWarehouse_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/property.proto",
}
