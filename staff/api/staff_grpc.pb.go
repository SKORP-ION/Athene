// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// StaffClient is the client API for Staff service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StaffClient interface {
	CreateEmployee(ctx context.Context, in *StaffEmployee, opts ...grpc.CallOption) (*StatusWithEmployee, error)
	GetStaff(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
	GetEmployee(ctx context.Context, in *GetEmployeeReq, opts ...grpc.CallOption) (*StaffEmployee, error)
	GetRecord(ctx context.Context, in *SRecord, opts ...grpc.CallOption) (*GetRecordResp, error)
	GetCount(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*CountResp, error)
	GetStaffProp(ctx context.Context, in *StaffEmployee, opts ...grpc.CallOption) (*GetStaffPropResp, error)
	GiveToEmployee(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*SStatus, error)
	TakeFromEmployee(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*SStatus, error)
	IsWithEmployee(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*SStatus, error)
}

type staffClient struct {
	cc grpc.ClientConnInterface
}

func NewStaffClient(cc grpc.ClientConnInterface) StaffClient {
	return &staffClient{cc}
}

func (c *staffClient) CreateEmployee(ctx context.Context, in *StaffEmployee, opts ...grpc.CallOption) (*StatusWithEmployee, error) {
	out := new(StatusWithEmployee)
	err := c.cc.Invoke(ctx, "/Staff/CreateEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetStaff(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/Staff/GetStaff", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetEmployee(ctx context.Context, in *GetEmployeeReq, opts ...grpc.CallOption) (*StaffEmployee, error) {
	out := new(StaffEmployee)
	err := c.cc.Invoke(ctx, "/Staff/GetEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetRecord(ctx context.Context, in *SRecord, opts ...grpc.CallOption) (*GetRecordResp, error) {
	out := new(GetRecordResp)
	err := c.cc.Invoke(ctx, "/Staff/GetRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetCount(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*CountResp, error) {
	out := new(CountResp)
	err := c.cc.Invoke(ctx, "/Staff/GetCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GetStaffProp(ctx context.Context, in *StaffEmployee, opts ...grpc.CallOption) (*GetStaffPropResp, error) {
	out := new(GetStaffPropResp)
	err := c.cc.Invoke(ctx, "/Staff/GetStaffProp", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) GiveToEmployee(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*SStatus, error) {
	out := new(SStatus)
	err := c.cc.Invoke(ctx, "/Staff/GiveToEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) TakeFromEmployee(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*SStatus, error) {
	out := new(SStatus)
	err := c.cc.Invoke(ctx, "/Staff/TakeFromEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *staffClient) IsWithEmployee(ctx context.Context, in *GiveReq, opts ...grpc.CallOption) (*SStatus, error) {
	out := new(SStatus)
	err := c.cc.Invoke(ctx, "/Staff/IsWithEmployee", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StaffServer is the server API for Staff service.
// All implementations must embed UnimplementedStaffServer
// for forward compatibility
type StaffServer interface {
	CreateEmployee(context.Context, *StaffEmployee) (*StatusWithEmployee, error)
	GetStaff(context.Context, *GetReq) (*GetResp, error)
	GetEmployee(context.Context, *GetEmployeeReq) (*StaffEmployee, error)
	GetRecord(context.Context, *SRecord) (*GetRecordResp, error)
	GetCount(context.Context, *GetReq) (*CountResp, error)
	GetStaffProp(context.Context, *StaffEmployee) (*GetStaffPropResp, error)
	GiveToEmployee(context.Context, *GiveReq) (*SStatus, error)
	TakeFromEmployee(context.Context, *GiveReq) (*SStatus, error)
	IsWithEmployee(context.Context, *GiveReq) (*SStatus, error)
	mustEmbedUnimplementedStaffServer()
}

// UnimplementedStaffServer must be embedded to have forward compatible implementations.
type UnimplementedStaffServer struct {
}

func (UnimplementedStaffServer) CreateEmployee(context.Context, *StaffEmployee) (*StatusWithEmployee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateEmployee not implemented")
}
func (UnimplementedStaffServer) GetStaff(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaff not implemented")
}
func (UnimplementedStaffServer) GetEmployee(context.Context, *GetEmployeeReq) (*StaffEmployee, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEmployee not implemented")
}
func (UnimplementedStaffServer) GetRecord(context.Context, *SRecord) (*GetRecordResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecord not implemented")
}
func (UnimplementedStaffServer) GetCount(context.Context, *GetReq) (*CountResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCount not implemented")
}
func (UnimplementedStaffServer) GetStaffProp(context.Context, *StaffEmployee) (*GetStaffPropResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetStaffProp not implemented")
}
func (UnimplementedStaffServer) GiveToEmployee(context.Context, *GiveReq) (*SStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveToEmployee not implemented")
}
func (UnimplementedStaffServer) TakeFromEmployee(context.Context, *GiveReq) (*SStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TakeFromEmployee not implemented")
}
func (UnimplementedStaffServer) IsWithEmployee(context.Context, *GiveReq) (*SStatus, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsWithEmployee not implemented")
}
func (UnimplementedStaffServer) mustEmbedUnimplementedStaffServer() {}

// UnsafeStaffServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StaffServer will
// result in compilation errors.
type UnsafeStaffServer interface {
	mustEmbedUnimplementedStaffServer()
}

func RegisterStaffServer(s grpc.ServiceRegistrar, srv StaffServer) {
	s.RegisterService(&Staff_ServiceDesc, srv)
}

func _Staff_CreateEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffEmployee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).CreateEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/CreateEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).CreateEmployee(ctx, req.(*StaffEmployee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetStaff_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GetStaff(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/GetStaff",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GetStaff(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEmployeeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GetEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/GetEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GetEmployee(ctx, req.(*GetEmployeeReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SRecord)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GetRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/GetRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GetRecord(ctx, req.(*SRecord))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GetCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/GetCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GetCount(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GetStaffProp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StaffEmployee)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GetStaffProp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/GetStaffProp",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GetStaffProp(ctx, req.(*StaffEmployee))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_GiveToEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).GiveToEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/GiveToEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).GiveToEmployee(ctx, req.(*GiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_TakeFromEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).TakeFromEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/TakeFromEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).TakeFromEmployee(ctx, req.(*GiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Staff_IsWithEmployee_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GiveReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StaffServer).IsWithEmployee(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Staff/IsWithEmployee",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StaffServer).IsWithEmployee(ctx, req.(*GiveReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Staff_ServiceDesc is the grpc.ServiceDesc for Staff service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Staff_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Staff",
	HandlerType: (*StaffServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateEmployee",
			Handler:    _Staff_CreateEmployee_Handler,
		},
		{
			MethodName: "GetStaff",
			Handler:    _Staff_GetStaff_Handler,
		},
		{
			MethodName: "GetEmployee",
			Handler:    _Staff_GetEmployee_Handler,
		},
		{
			MethodName: "GetRecord",
			Handler:    _Staff_GetRecord_Handler,
		},
		{
			MethodName: "GetCount",
			Handler:    _Staff_GetCount_Handler,
		},
		{
			MethodName: "GetStaffProp",
			Handler:    _Staff_GetStaffProp_Handler,
		},
		{
			MethodName: "GiveToEmployee",
			Handler:    _Staff_GiveToEmployee_Handler,
		},
		{
			MethodName: "TakeFromEmployee",
			Handler:    _Staff_TakeFromEmployee_Handler,
		},
		{
			MethodName: "IsWithEmployee",
			Handler:    _Staff_IsWithEmployee_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/staff.proto",
}
